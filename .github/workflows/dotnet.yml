# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: windows-latest

    strategy:
      matrix:
        arch: [x64,arm64]
        configuration: [Release]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    # - name: Setup signtool
    #   uses: phuonghuynh/code-sign-action@v2.0.8

    - name: Install NuGet
      uses: nuget/setup-nuget@v2

    - name: Restore NuGet packages
      run: nuget restore WID.sln

    - name: Decode signing certificate
      run: |
        echo "${{ secrets.SIGNING_CERTIFICATE }}" > cert.txt
        certutil -decode cert.txt MyAppCert.pfx

    - name: Import signing certificate
      run: |
        powershell -command "Import-PfxCertificate -FilePath MyAppCert.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String '${{ secrets.SIGNING_PASSWORD }}' -AsPlainText -Force)"

    - name: Publish project using MSBuild
      run: msbuild WID.sln /p:Configuration=Release /p:Platform=${{ matrix.arch }} /p:UapAppxPackageBuildMode=StoreUpload /p:AppxBundle=Always
    - name: Copy build bins
      run: Get-ChildItem -Path . -Recurse -Filter *.msix |
        Where-Object { $_.FullName -notmatch '\\Dependencies\\' } |
        ForEach-Object {
          Copy-Item -Path $_.FullName -Destination . -Force
        }
    
    # - name: Sign MSIX package
    #   run: signtool sign /fd SHA256 /f MyAppCert.pfx /p (ConvertTo-SecureString -String '${{ secrets.SIGNING_PASSWORD }}' -AsPlainText -Force) "*.msix"

    - name: Upload app package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Binaries - Release - ${{ matrix.arch }}
        path: "*.msix"